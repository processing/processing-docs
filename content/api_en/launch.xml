<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>launch()</name>

<category>Input</category>

<subcategory>Files</subcategory>

<type></type>

<example>
<image></image>
<code><![CDATA[
void setup() {
  size(200, 200);
}

void draw() { 
  // draw() must be present for mousePressed() to work
}

void mousePressed() {
  println("Opening Process_4");
  launch("/Applications/Process_4.app");
}

]]></code>
</example>

<description><![CDATA[
Attempts to open an application or file using your platform's launcher. The <b>filename</b> parameter is a String specifying the file name and location. The location parameter must be a full path name, or the name of an executable in the system's PATH. In most cases, using a full path is the best option, rather than relying on the system PATH. Be sure to make the file executable before attempting to open it (chmod +x).<br />
<br />
This function (roughly) emulates what happens when you double-click an application or document in the macOS Finder, the Windows Explorer, or your favorite Linux file manager. If you're trying to run command line functions directly, use the <b>exec()</b> function instead (see below).<br />
<br />
This function behaves differently on each platform. On Windows, the parameters are sent to the Windows shell via "cmd /c". On macOS, the "open" command is used (type "man open" in Terminal.app for documentation). On Linux, it first tries gnome-open, then kde-open, but if neither are available, it sends the command to the shell and prays that something useful happens.<br />
<br />
For users familiar with Java, this is not the same as Runtime.exec(), because the launcher command is prepended. Instead, the <b>exec(String[])</b> function is a shortcut for Runtime.getRuntime.exec(String[]). The <b>exec()</b> function is documented in the <a href="http://processing.github.io/processing-javadocs/core/">JavaDoc</a> in the <b>PApplet</b> class.
]]></description>

</root>
