<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>

<name>readBytesUntil()</name>

<category>Serial</category>

<subcategory>Serial</subcategory>

<usage>Web &amp; Application</usage>

<example>
<image></image>
<code><![CDATA[
// Example by Tom Igoe

import processing.serial.*;

Serial myPort;  // The serial port

void setup() {
  // List all the available serial ports:
  printArray(Serial.list());
  // Open the port you are using at the rate you want:
  myPort = new Serial(this, Serial.list()[0], 9600);
  myPort.write(65);
}

void draw() {
  while (myPort.available() > 0) {
    int lf = 10;
    // Expand array size to the number of bytes you expect:
    byte[] inBuffer = new byte[7];
    myPort.readBytesUntil(lf, inBuffer);
    if (inBuffer != null) {
      String myString = new String(inBuffer);
      println(myString);
    }
  }
}

]]></code>
</example>

<description><![CDATA[
Reads from the port into a buffer of bytes up to and including a particular character. If the character isn't in the buffer, <b>null</b> is returned. The version with without the <b>byteBuffer</b> parameter returns a byte array of all data up to and including the <b>interesting</b> byte. This is not efficient, but is easy to use. The version with the <b>byteBuffer</b> parameter is more memory and time efficient. It grabs the data in the buffer and puts it into the byte array passed in and returns an int value for the number of bytes read. If the byte buffer is not large enough, -1 is returned and an error is printed to the message area. If nothing is in the buffer, 0 is returned.
]]></description>


</root>
